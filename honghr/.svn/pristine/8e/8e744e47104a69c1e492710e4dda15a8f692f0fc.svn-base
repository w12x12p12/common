
package com.hongedu.honghr.honghr.web;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hongedu.honghr.util.chineseChar.ChineseInital;
import com.hongedu.honghr.util.json.JsonResult;
import com.hongedu.honghr.util.page.Pager;
import com.hongedu.honghr.honghr.common.constant.DataConstant;
import com.hongedu.honghr.honghr.entity.Department;
import com.hongedu.honghr.honghr.entity.Position;
import com.hongedu.honghr.honghr.service.DepartmentService;
import com.hongedu.honghr.honghr.service.PositionService;


/**
 * @author  
 * el_bp_position 表对应的controller
 * 2017/12/07 04:04:41
 */
@Controller
@RequestMapping("/admin/position")
public class PositionController {
	
	@Autowired
	private PositionService positionService;
	@Autowired
	private DepartmentService departmentService;
	/**
	 * 查询详情
	 * 
	 * <p>Title: findPosition</p> 
	 * <p>Description: </p>  
	 * @time 下午12:01:55 
	 * @param positionId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findPosition", method = RequestMethod.POST)
	public JsonResult findPosition(@RequestParam(required = true) java.lang.Integer positionId) {
		try {
			Position position = positionService.findById(positionId);
			return new JsonResult(JsonResult.SUCCESS_CODE, "", position);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}
	
	/**
	 * 编辑初始化数据
	 * 
	 * <p>Title: editPosition</p> 
	 * <p>Description: </p>  
	 * @time 下午12:01:24 
	 * @param positionId
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/editPosition", method = RequestMethod.GET)
	public String editPosition(java.lang.Integer positionId, Model model) {
		List<Department> departmentList = departmentService.findDepartmentList();
		List<Position> positionsList = positionService.findPositionList();
		if (positionId != null) {
			Position position = positionService.findById(positionId);
			Department department = departmentService.findById(position.getDepartmentId());
			Position positions = positionService.findByParentId(position.getPositionParentId());
			model.addAttribute("position", position);
			model.addAttribute("positions", positions);
			model.addAttribute("department", department);
		}
		model.addAttribute("positionsList", positionsList);
		model.addAttribute("departmentList", departmentList);
		return "admin/position/editPosition";
	}

	/**
	 * 添加和修改职务
	 * 
	 * <p>Title: savePosition</p> 
	 * <p>Description: </p>  
	 * @time 下午12:00:36 
	 * @param position
	 * @return
	 */
	@SuppressWarnings("static-access")
	@ResponseBody
	@RequestMapping(value = "/savePosition", method = RequestMethod.POST)
	public JsonResult savePosition(Position position) {
		try {// 添加
			ChineseInital chineseInital = new ChineseInital();
			Integer positionParentId = position.getPositionParentId();
			Position positions = positionService.findMaxByParentId(positionParentId);
			Position positionInfo = null;
			if (position.getPositionParentId() != null) {
				positionInfo = positionService.findByParentId(positionParentId);
			}
			if (position.getPositionId() == null) {
				if (positionParentId == null) {
					position.setPositionParentId(0);
					Position positiones = positionService.findMaxByParentId(0);
					if (positiones.getPositionNum() != null) {
						Integer POSNum = Integer.parseInt(positiones.getPositionNum()) + 1;
						position.setPositionNum(String.valueOf(POSNum));
					} else {
						String POSNum = positiones.getPositionNum();
						position.setPositionNum(POSNum + "101");
					}
				} else {
					if (positions.getPositionNum() != null) {
						Integer POSNum = Integer.parseInt(positions.getPositionNum()) + 1;
						position.setPositionNum(String.valueOf(POSNum));
					} else {
						String POSNum = positionInfo.getPositionNum();
						position.setPositionNum(POSNum + "101");
					}
				}
				position.setPositionCode(chineseInital.getAllFirstLetter(position.getPositionName()));
				position.setReferred(DataConstant.UNREFERRED);
				position.setDeleted(DataConstant.EXIST);
				positionService.save(position);
			} else {// 修改
				position.setPositionCode(chineseInital.getAllFirstLetter(position.getPositionName()));
				position.setReferred(DataConstant.UNREFERRED);
				position.setDeleted(DataConstant.EXIST);
				positionService.update(position);
			}
			return new JsonResult(JsonResult.SUCCESS_CODE, "", null);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}
	/**
	 * 删除职务
	 * 
	 * <p>Title: deletePosition</p> 
	 * <p>Description: </p>  
	 * @time 下午12:02:29 
	 * @param position
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/deletePosition",method=RequestMethod.POST)
	public JsonResult deletePosition(
			Position position) {
		try {
			Position positions = positionService.findById(position.getPositionId());
			if (!positions.getReferred().equals(DataConstant.REFERRED)) {
				positionService.updateDel(position);
				return new JsonResult(JsonResult.SUCCESS_CODE, "", null);
			}else {
				return new JsonResult(JsonResult.FAILE_CODE, "该职务已被引用，暂时无法删除", null);
			}
		} catch (Exception e) {
			e.printStackTrace();
		return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}
	
	/**
	 * 查询  分页 模糊查询
	 * 
	 * <p>Title: positionList</p> 
	 * <p>Description: </p>  
	 * @time 下午12:02:55 
	 * @param currentPage
	 * @param pageSize
	 * @param positionName
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/positionList", method = RequestMethod.GET)
	public String positionList(@RequestParam(required = false, defaultValue = "1") Integer currentPage,
			@RequestParam(required = false, defaultValue = "10") Integer pageSize, String positionName, Model model) {
		Pager<Position> page = positionService.findPage(positionName, currentPage, pageSize);
		for (int i = 0; i < page.getDataList().size(); i++) {
			int departmentId = page.getDataList().get(i).getDepartmentId();
			int positionParentId = page.getDataList().get(i).getPositionParentId();
			Department department = departmentService.findDepartment(departmentId);
			Position position = positionService.findByParentId(positionParentId);
			page.getDataList().get(i).setDepName(department.getDepartmentName());
			page.getDataList().get(i).setLeaderPosition(position.getPositionName());
		}
		model.addAttribute("page", page);
		model.addAttribute("positionName", positionName);
		return "admin/position/positionList";
	}
}
