
package com.hongedu.honghr.honghr.web;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.hongedu.honghr.honghr.common.constant.CodeConstant;
import com.hongedu.honghr.honghr.common.constant.DataConstant;
import com.hongedu.honghr.honghr.common.constant.PageConstant;
import com.hongedu.honghr.honghr.common.constant.SessionConstant;
import com.hongedu.honghr.honghr.common.enums.EnumApplyCheckStatus;
import com.hongedu.honghr.honghr.common.enums.EnumApplyStatus;
import com.hongedu.honghr.honghr.entity.AbsenceApplyCheck;
import com.hongedu.honghr.honghr.entity.Code;
import com.hongedu.honghr.honghr.entity.Department;
import com.hongedu.honghr.honghr.entity.Employee;
import com.hongedu.honghr.honghr.entity.vo.AbsenceApplyCheckVo;
import com.hongedu.honghr.honghr.entity.vo.AbsenceApplyVo;
import com.hongedu.honghr.honghr.service.AbsenceApplyCheckService;
import com.hongedu.honghr.honghr.service.AbsenceApplyService;
import com.hongedu.honghr.honghr.service.CodeService;
import com.hongedu.honghr.honghr.service.DepartmentService;
import com.hongedu.honghr.honghr.service.EmployeeService;
import com.hongedu.honghr.util.json.JsonResult;
import com.hongedu.honghr.util.page.Pager;

/**
 * @author absence_apply 表对应的controller 2017/12/07 04:04:38
 */
@Controller
@RequestMapping("/admin/absenceApply")
public class AbsenceApplyController {

	@Autowired
	private AbsenceApplyCheckService absenceApplyCheckService;
	@Autowired
	private AbsenceApplyService absenceApplyService;
	@Autowired
	private DepartmentService departmentService;
	@Autowired
	private EmployeeService employeeService;
	@Autowired
	private CodeService codeServcie;

	/**
	 * 跳转至填写休假申请页面
	 * 
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/addAbsenceApply", method = RequestMethod.GET)
	public String addAbsenceApply(Model model) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			List<Department> departmentList = departmentService.findDepartmentListByEmployee(employee.getEmployeeId());
			List<Code> codeList = codeServcie.findCodeById(CodeConstant.ABSENCE_APPLY_TYPE_MENU);
			AbsenceApplyVo absenceApplyVo = new AbsenceApplyVo();
			absenceApplyVo.setAbsenceApplyNum(absenceApplyService.getAbsenceApplyNum(employee.getEmployeeId()));
			absenceApplyVo.setApplyEmployeeName(employee.getEmployeeName());
			absenceApplyVo.setApplyDateTime(new Date());
			model.addAttribute("departmentList", departmentList);
			model.addAttribute("codeList", codeList);
			model.addAttribute("absenceApplyVo", absenceApplyVo);
		}
		return "admin/absenceApply/addAbsenceApply";
	}

	/**
	 * 查询分配员工的部门
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/showDepartmentList", method = RequestMethod.GET)
	public String findAllDepartmentList() {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			List<Department> departmentList = departmentService.findAllDepartmentList(employee.getEmployeeId());
			return JSONArray.toJSONString(departmentList);
		}
		return null;
	}

	/**
	 * 查询部门的员工
	 * 
	 * @param departmentNum
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/showCheckEmployeeList", method = RequestMethod.GET)
	public String findEmployeeListByDepartmentNum(String departmentNum) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			List<Employee> employeeList = employeeService.findEmployeeListByDepartmentNum(departmentNum,
					employee.getEmployeeId());
			return JSONArray.toJSONString(employeeList);
		}
		return null;
	}

	/**
	 * 查询部门的员工
	 * 
	 * @param employeeId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getEmployeeById", method = RequestMethod.GET)
	public String getEmployeeById(Integer employeeId) {
		Employee employee = employeeService.getEmployeeById(employeeId);
		return JSONObject.toJSONString(employee);
	}

	/**
	 * 保存休假申请单
	 * 
	 * @param absenceApplyVo
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/addForAbsenceApplyCheck", method = RequestMethod.POST)
	public String addForAbsenceApplyCheck(AbsenceApplyVo absenceApplyVo) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			absenceApplyVo.setEmployeeId(employee.getEmployeeId());
			absenceApplyVo.setCreateEmployeeId(employee.getEmployeeId());
			absenceApplyVo.setCreateDateTime(new Date());
			absenceApplyVo.setDeleted(DataConstant.EXIST);
		}
		absenceApplyVo.setApplyDuration(getHours(absenceApplyVo.getApplyBeginTime(), absenceApplyVo.getApplyEndTime()));
		absenceApplyService.insertAbsenceApplyVo(absenceApplyVo);
		return JsonResult.SUCCESS_CODE;
	}

	/**
	 * 查询休假申请列表页面
	 * 
	 * @param currentPage:当前页
	 * @param pageSize:分页数
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/absenceApplyList", method = RequestMethod.GET)
	public String absenceApplyList(
			@RequestParam(required = false, defaultValue = PageConstant.DEFAULT_PAGE_START) Integer currentPage,
			@RequestParam(required = false, defaultValue = PageConstant.DEFAULT_PAGE_SIZE) Integer pageSize,
			Model model) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			Pager<AbsenceApplyVo> page = absenceApplyService.findPage(employee.getEmployeeId(), currentPage, pageSize);
			model.addAttribute("page", page);
		}
		return "admin/absenceApply/absenceApplyList";
	}

	/**
	 * 查看休假申请单
	 * 
	 * @param absenceApplyId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getAbsenceApply", method = RequestMethod.GET)
	public String getAbsenceApplyVo(Integer absenceApplyId) {
		AbsenceApplyVo absenceApplyVo = absenceApplyService.getAbsenceApplyVo(absenceApplyId);
		return JSONObject.toJSONString(absenceApplyVo);
	}

	/**
	 * 打开编辑休假申请单弹框
	 * 
	 * @param absenceApplyId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/absenceApplyToEdit", method = RequestMethod.GET)
	public String absenceApplyToEdit(Integer absenceApplyId) {
		AbsenceApplyVo absenceApplyVo = absenceApplyService.getAbsenceApplyVo(absenceApplyId);
		List<Code> codeList = codeServcie.findCodeById(CodeConstant.ABSENCE_APPLY_TYPE_MENU);
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("absenceApplyVo", absenceApplyVo);
		resultMap.put("codeList", codeList);
		return JSONObject.toJSONString(resultMap);
	}

	/**
	 * 编辑休假申请单
	 * 
	 * @param absenceApplyVo
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/editForAbsenceApplyCheck", method = RequestMethod.POST)
	public String editForAbsenceApplyCheck(AbsenceApplyVo absenceApplyVo) {
		absenceApplyVo.setApplyDuration(getHours(absenceApplyVo.getApplyBeginTime(), absenceApplyVo.getApplyEndTime()));
		absenceApplyService.updateAbsenceApplyVo(absenceApplyVo);
		return JsonResult.SUCCESS_CODE;
	}

	/**
	 * 提交审批
	 * 
	 * @param absenceApplyId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/submitApplyCheck", method = RequestMethod.POST)
	public String submitApplyCheck(Integer absenceApplyId) {
		absenceApplyService.updateAbsenceApplyStatus(EnumApplyStatus.WAIT_CHECK.getCode(), absenceApplyId);
		return JsonResult.SUCCESS_CODE;
	}

	/**
	 * 撤回休假申请单
	 * 
	 * @param absenceApplyId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/backApplyCheck", method = RequestMethod.POST)
	public String backApplyCheck(Integer absenceApplyId) {
		absenceApplyService.updateAbsenceApplyStatus(EnumApplyStatus.DRAFT.getCode(), absenceApplyId);
		return JsonResult.SUCCESS_CODE;
	}

	/**
	 * 删除休假申请单
	 * 
	 * @param absenceApplyId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/deleteAbsenceApply/{absenceApplyId}", method = RequestMethod.DELETE)
	public String deleteAbsenceApply(@PathVariable("absenceApplyId") Integer absenceApplyId) {
		absenceApplyService.deleteAbsenceApply(absenceApplyId);
		return JsonResult.SUCCESS_CODE;
	}

	/**
	 * 查看休假申请单审批记录
	 * 
	 * @param absenceApplyId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getAbsenceApplyProgress", method = RequestMethod.GET)
	public String getAbsenceApplyProgress(Integer absenceApplyId) {
		List<AbsenceApplyCheckVo> absenceApplyCheckVoList = absenceApplyCheckService
				.findAbsenceApplyCheckVosByApplyId(absenceApplyId);
		return JSONArray.toJSONString(absenceApplyCheckVoList);
	}

	/**
	 * 查询待审批休假申请列表页面
	 * 
	 * @param currentPage:当前页
	 * @param pageSize:分页数
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/absenceApplyListForCheck", method = RequestMethod.GET)
	public String absenceApplyListForCheck(
			@RequestParam(required = false, defaultValue = PageConstant.DEFAULT_PAGE_START) Integer currentPage,
			@RequestParam(required = false, defaultValue = PageConstant.DEFAULT_PAGE_SIZE) Integer pageSize,
			Model model) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			Pager<AbsenceApplyVo> page = absenceApplyService.findForCheckPage(employee.getEmployeeId(), currentPage,
					pageSize);
			model.addAttribute("page", page);
		}
		return "admin/absenceApply/absenceApplyListForCheck";
	}

	/**
	 * 同意休假申请单
	 * 
	 * @param applyCheckSuggest
	 * @param absenceApplyId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/agreeAbsenceApply", method = RequestMethod.POST)
	public String agreeAbsenceApply(@RequestParam(required = false, defaultValue = "") String applyCheckSuggest,
			Integer absenceApplyId) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			AbsenceApplyCheck absenceApplyCheck = new AbsenceApplyCheck();
			absenceApplyCheck.setAbsenceApplyId(absenceApplyId);
			absenceApplyCheck.setCheckEmployeeId(employee.getEmployeeId());
			absenceApplyCheck.setApplyCheckTime(new Date());
			absenceApplyCheck.setApplyIsAllowed(EnumApplyCheckStatus.AGREE.getCode());
			absenceApplyCheck.setApplyCheckSuggest(applyCheckSuggest);
			absenceApplyService.checkAbsenceApply(absenceApplyCheck);
		}
		return JsonResult.SUCCESS_CODE;
	}

	/**
	 * 不同意休假申请单
	 * 
	 * @param applyCheckSuggest
	 * @param absenceApplyId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/disAgreeAbsenceApply", method = RequestMethod.POST)
	public String disAgreeAbsenceApply(String applyCheckSuggest, Integer absenceApplyId) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			AbsenceApplyCheck absenceApplyCheck = new AbsenceApplyCheck();
			absenceApplyCheck.setAbsenceApplyId(absenceApplyId);
			absenceApplyCheck.setCheckEmployeeId(employee.getEmployeeId());
			absenceApplyCheck.setApplyCheckTime(new Date());
			absenceApplyCheck.setApplyIsAllowed(EnumApplyCheckStatus.DISAGREE.getCode());
			absenceApplyCheck.setApplyCheckSuggest(applyCheckSuggest);
			absenceApplyService.checkAbsenceApply(absenceApplyCheck);
		}
		return JsonResult.SUCCESS_CODE;
	}

	/**
	 * 查询已审批休假申请列表页面
	 * 
	 * @param currentPage:当前页
	 * @param pageSize:分页数
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/absenceApplyListHasCheck", method = RequestMethod.GET)
	public String absenceApplyListHasCheck(
			@RequestParam(required = false, defaultValue = PageConstant.DEFAULT_PAGE_START) Integer currentPage,
			@RequestParam(required = false, defaultValue = PageConstant.DEFAULT_PAGE_SIZE) Integer pageSize,
			Model model) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			Pager<AbsenceApplyVo> page = absenceApplyService.findHasCheckPage(employee.getEmployeeId(), currentPage,
					pageSize);
			model.addAttribute("page", page);
		}
		return "admin/absenceApply/absenceApplyListHasCheck";
	}

	private String getHours(Date beginTime, Date endTime) {
		if (beginTime != null && endTime != null) {
			long msec = endTime.getTime() - beginTime.getTime();
			long days = msec / (1000 * 60 * 60 * 24);
			long hours = (msec % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);
			long time = days * 8 + hours <= days * 8 + 8 ? days * 8 + hours : days * 8 + 8;
			return time + "";
		}
		return "";
	}
}