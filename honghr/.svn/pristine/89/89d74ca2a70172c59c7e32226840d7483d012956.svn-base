
package com.hongedu.honghr.honghr.web;

import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;

import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.hongedu.honghr.honghr.common.constant.CodeConstant;
import com.hongedu.honghr.honghr.common.constant.DataConstant;
import com.hongedu.honghr.honghr.common.constant.PageConstant;
import com.hongedu.honghr.honghr.common.constant.SessionConstant;
import com.hongedu.honghr.honghr.entity.BusinessTripApply;
import com.hongedu.honghr.honghr.entity.Code;
import com.hongedu.honghr.honghr.entity.Department;
import com.hongedu.honghr.honghr.entity.Employee;
import com.hongedu.honghr.honghr.entity.vo.BusinessTripApplyVo;
import com.hongedu.honghr.honghr.service.BusinessTripApplyService;
import com.hongedu.honghr.honghr.service.CodeService;
import com.hongedu.honghr.honghr.service.DepartmentService;
import com.hongedu.honghr.honghr.service.EmployeeService;
import com.hongedu.honghr.util.json.JsonResult;
import com.hongedu.honghr.util.page.Pager;

/**
 * @author el_bp_business_trip_apply 表对应的controller 2017/12/07 04:04:40
 */
@Controller
@RequestMapping("/admin/businessTripApply")
public class BusinessTripApplyController {

	@Autowired
	private BusinessTripApplyService businessTripApplyService;
	@Autowired
	private DepartmentService departmentService;
	@Autowired
	private EmployeeService employeeService;
	@Autowired
	private CodeService codeService;

	/**
	 * 跳转至填写出差申请页面
	 * 
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/addBusinessTripApply", method = RequestMethod.GET)
	public String addBusinessTripApply(Model model) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			List<Department> departmentList = departmentService.findDepartmentListByEmployee(employee.getEmployeeId());
			List<Code> applyTypeList = codeService.findCodeById(CodeConstant.BUSINESS_TRIP_APPLY_TYPE_MENU);
			List<Code> provinceList = codeService.findCodeById(CodeConstant.PROVINCE_MENU);
			BusinessTripApplyVo businessTripApplyVo = new BusinessTripApplyVo();
			businessTripApplyVo.setBusinessTripApplyNum(
					businessTripApplyService.getBusinessTripApplyNum(employee.getEmployeeId()));
			businessTripApplyVo.setApplyEmployeeName(employee.getEmployeeName());
			businessTripApplyVo.setApplyDateTime(new Date());
			model.addAttribute("departmentList", departmentList);
			model.addAttribute("applyTypeList", applyTypeList);
			model.addAttribute("provinceList", provinceList);
			model.addAttribute("businessTripApplyVo", businessTripApplyVo);
		}
		return "admin/businessTripApply/addBusinessTripApply";
	}

	/**
	 * 根据省份查询市县
	 * 
	 * @param provinceId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getCitys", method = RequestMethod.GET)
	public String getCitys(Integer provinceId) {
		List<Code> cityList = codeService.findCodeById(provinceId);
		return JSONArray.toJSONString(cityList);
	}

	/**
	 * 查询分配员工的部门
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/showDepartmentList", method = RequestMethod.GET)
	public String findAllDepartmentList() {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			List<Department> departmentList = departmentService.findAllDepartmentList(employee.getEmployeeId());
			return JSONArray.toJSONString(departmentList);
		}
		return null;
	}

	/**
	 * 查询部门的员工
	 * 
	 * @param departmentNum
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/showCheckEmployeeList", method = RequestMethod.GET)
	public String findEmployeeListByDepartmentNum(String departmentNum) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			List<Employee> employeeList = employeeService.findEmployeeListByDepartmentNum(departmentNum,
					employee.getEmployeeId());
			return JSONArray.toJSONString(employeeList);
		}
		return null;
	}

	/**
	 * 查询部门的员工
	 * 
	 * @param employeeId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getEmployeeById", method = RequestMethod.GET)
	public String getEmployeeById(Integer employeeId) {
		Employee employee = employeeService.getEmployeeById(employeeId);
		return JSONObject.toJSONString(employee);
	}

	/**
	 * 保存出差申请单
	 * 
	 * @param absenceApplyVo
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/addForBusinessTripCheck", method = RequestMethod.POST)
	public String addForBusinessTripCheck(BusinessTripApplyVo businessTripApplyVo) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			businessTripApplyVo.setEmployeeId(employee.getEmployeeId());
			businessTripApplyVo.setCreateEmployeeId(employee.getEmployeeId());
			businessTripApplyVo.setCreateDateTime(new Date());
			businessTripApplyVo.setDeleted(DataConstant.EXIST);
		}
		businessTripApplyVo.setApplyDuration(
				getHours(businessTripApplyVo.getApplyBeginTime(), businessTripApplyVo.getApplyEndTime()));
		businessTripApplyService.insertBusinessTripApplyVo(businessTripApplyVo);
		return JsonResult.SUCCESS_CODE;
	}

	/**
	 * 查询出差申请列表页面
	 * 
	 * @param currentPage:当前页
	 * @param pageSize:分页数
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/businessTripApplyList", method = RequestMethod.GET)
	public String businessTripApplyList(
			@RequestParam(required = false, defaultValue = PageConstant.DEFAULT_PAGE_START) Integer currentPage,
			@RequestParam(required = false, defaultValue = PageConstant.DEFAULT_PAGE_SIZE) Integer pageSize,
			Model model) {
		Employee employee = (Employee) SecurityUtils.getSubject().getSession()
				.getAttribute(SessionConstant.SESSION_EMPLOYEE_KEY);
		if (employee != null) {
			Pager<BusinessTripApplyVo> page = businessTripApplyService.findPage(employee.getEmployeeId(), currentPage,
					pageSize);
			model.addAttribute("page", page);
		}
		return "admin/businessTripApply/businessTripApplyList";
	}

	/**
	 * 查询BusinessTripApply详情
	 * 
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findBusinessTripApply", method = RequestMethod.POST)
	public JsonResult findBusinessTripApply(@RequestParam(required = true) java.lang.Integer businessTripApplyId) {
		try {
			BusinessTripApply businessTripApply = businessTripApplyService.findById(businessTripApplyId);
			return new JsonResult(JsonResult.SUCCESS_CODE, "", businessTripApply);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}

	/**
	 * 编辑BusinessTripApply
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/editBusinessTripApply", method = RequestMethod.GET)
	public String editBusinessTripApply(java.lang.Integer businessTripApplyId, Model model) {
		if (businessTripApplyId != null) {
			BusinessTripApply businessTripApply = businessTripApplyService.findById(businessTripApplyId);
			model.addAttribute("businessTripApply", businessTripApply);
		}
		return "admin/businessTripApply/editBusinessTripApply";
	}

	/**
	 * 保存BusinessTripApply
	 * 
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/saveBusinessTripApply", method = RequestMethod.POST)
	public JsonResult saveBusinessTripApply(BusinessTripApply businessTripApply) {
		try {
			if (businessTripApply.getBusinessTripApplyId() == null) {
				businessTripApplyService.save(businessTripApply);
			} else {
				businessTripApplyService.update(businessTripApply);
			}
			return new JsonResult(JsonResult.SUCCESS_CODE, "", null);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}

	/**
	 * 删除BusinessTripApply
	 * 
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/deleteBusinessTripApply", method = RequestMethod.POST)
	public JsonResult deleteBusinessTripApply(@RequestParam(required = true) java.lang.Integer businessTripApplyId) {
		try {
			businessTripApplyService.delete(businessTripApplyId);
			return new JsonResult(JsonResult.SUCCESS_CODE, "", null);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}

	private String getHours(Date beginTime, Date endTime) {
		if (beginTime != null && endTime != null) {
			long msec = endTime.getTime() - beginTime.getTime();
			long days = msec / (1000 * 60 * 60 * 24);
			long hours = (msec % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);
			DecimalFormat df = new DecimalFormat("######0.0");
			String time = df.format(days + (hours == 0 ? 0 : hours >= 8 ? 1 : hours >= 4 ? 0.5 : 0));
			if (time.contains(".0")) {
				return time.substring(0, time.lastIndexOf("."));
			}
			return time;
		}
		return "";
	}
}