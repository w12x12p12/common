
package com.hongedu.honghr.honghr.web;

import java.io.UnsupportedEncodingException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hongedu.honghr.util.json.JsonResult;
import com.hongedu.honghr.util.page.Pager;
import com.hongedu.honghr.honghr.common.constant.DataConstant;
import com.hongedu.honghr.honghr.entity.Department;
import com.hongedu.honghr.honghr.service.DepartmentService;

/**
 * @author el_bp_department 表对应的controller 2017/12/07 04:04:40
 */
@Controller
@RequestMapping("/admin/department")
public class DepartmentController {

	@Autowired
	private DepartmentService departmentService;

	/**
	 * 查询Department详情
	 * 
	 * <p>Title: findDepartment</p> 
	 * <p>Description: </p>  
	 * @time 下午3:20:34 
	 * @param departmentId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/findDepartment", method = RequestMethod.POST)
	public JsonResult findDepartment(@RequestParam(required = true) java.lang.Integer departmentId) {
		try {
			Department department = departmentService.findById(departmentId);
			return new JsonResult(JsonResult.SUCCESS_CODE, "", department);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}

	/**
	 * 编辑Department初始化
	 * 
	 * <p>Title: editDepartment</p> 
	 * <p>Description: </p>  
	 * @time 上午11:38:57 
	 * @param departmentId
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/editDepartment", method = RequestMethod.GET)
	public String editDepartment(java.lang.Integer departmentId, Model model) {
		//查询所有的部门
		List<Department> list = departmentService.findDepartmentList();
		if (departmentId != null) {
			//查询当前部门
			Department department = departmentService.findById(departmentId);
			//查询当前部门的父级部门
			Department departmentParent = departmentService.findParentInfo(department.getDepartmentParentId());
			model.addAttribute("department", department);
			model.addAttribute("departmentParent", departmentParent);
		}
		model.addAttribute("list", list);
		return "admin/department/editDepartment";
	}
	/**
	 * 保存Department(添加&修改)
	 * 
	 * <p>Title: saveDepartment</p> 
	 * <p>Description: </p>  
	 * @time 上午11:06:08 
	 * @param department
	 * @return
	 * 		department为null,执行添加
	 * 		department非为null，执行修改
	 */
	@ResponseBody
	@RequestMapping(value = "/saveDepartment", method = RequestMethod.POST)
	public JsonResult saveDepartment(Department department) {
		try {
			/* department为null,执行添加 */
			if (department.getDepartmentId() == null) {
				// 获取到用户选择的父级ID
				Integer departmentParentId = department.getDepartmentParentId();
				// 查询department_id=departmentParentId的Department信息
				Department departments = departmentService.findParentInfo(departmentParentId);
				// 查询以departmentParentId为父级的最大departmentNum
				Department departmentNum = departmentService.findMaxNum(departmentParentId);
				/* 
				 * 判断用户添加数据时是否选择了父级 1.如果departmentParentId为null 说明用户添加数据时没有选择父级，默认设置该条数据为顶级
				 * 即department.setDepartmentParentId(0);
				 * 
				 * 2.如果departmentParentId非为null 说明用户添加数据时选择父级,获取查询到的最大DepartmentNum
				 * A.如果DepartmentNum为null,说明该部门下还没有子部门
				 * 设置用户添加数据的DepartmentNum为查询到的部门的DepartmentNum拼上101
				 * B.如果DepartmentNum非为null,说明该部门下有子部门
				 * 设置用户添加数据的DepartmentNum为查询到的部门下的最大DepartmentNum+1
				 */
				if (departmentParentId == null) {
					// 设置该条数据为顶级
					department.setDepartmentParentId(DataConstant.department_top_parentId);
					// 查询以departmentParentId为0的最大departmentNum
					Department department2 = departmentService.findMaxNum(DataConstant.department_top_parentId);
					/*
					 * 判断顶级部门的DepartmentNum是否为null 1.为空null说明数据库里没有数据,初始化数据库数据，设置DepartmentNum为1
					 * 2.非为null则取得查询到的最大DepartmentNum，加1，设置为用户添加数据的DepartmentNum
					 */
					if (department2.getDepartmentNum() != null) {
						// 获取以0为departmentParentId为父级的最大departmentNum,加1
						Integer DEPNUM = Integer.parseInt(department2.getDepartmentNum()) + 1;
						// 设置为用户添加数据的DepartmentNum
						department.setDepartmentNum(String.valueOf(DEPNUM));
					} else {
						// 设置为最顶级部门，即初始化数据库信息
						department.setDepartmentNum(DataConstant.DEPARTMENT_TOP_NUM);
					}
				} else {
					if (departmentNum.getDepartmentNum() != null) {
						// 设置用户添加数据的DepartmentNum为查询到的部门下的最大DepartmentNum+1
						Integer DEPNUM = Integer.parseInt(departmentNum.getDepartmentNum()) + 1;
						department.setDepartmentNum(String.valueOf(DEPNUM));
					} else {
						// 设置用户添加数据的DepartmentNum为查询到的部门的DepartmentNum拼上101
						String parentNum = departments.getDepartmentNum();
						department.setDepartmentNum(parentNum + DataConstant.DEPARTMENT_SECOND_TOP_NUM);
					}
					// 修改用户所选择为父级的部门应用状态为‘REFERRED’
					departments.setReferred(DataConstant.REFERRED);
					departmentService.update(departments);
				}
				// 新添加数据默认为未删除状态
				department.setDeleted(DataConstant.EXIST);
				// 新添加数据默认为未引用状态
				department.setReferred(DataConstant.UNREFERRED);
				departmentService.save(department);
			}
			/* department非为null，执行修改 */
			else {
				department.setDeleted(DataConstant.EXIST);
				departmentService.update(department);
			}
			return new JsonResult(JsonResult.SUCCESS_CODE, "", null);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}
	/**
	 * 删除Department
	 * 
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/deleteDepartment", method = RequestMethod.POST)
	public JsonResult deleteDepartment(Department department) {
		try {
			//查询要删除的部门信息
			Department departmentInfo = departmentService.findById(department.getDepartmentId());
			//判断部门是否被引用
			if (!departmentInfo.getReferred().equals(DataConstant.REFERRED)) {//部门未被引用，可以删除
				departmentService.updateDel(department);
				return new JsonResult(JsonResult.SUCCESS_CODE, "", null);
			} else {//部门被引用，不让删除
				return new JsonResult(JsonResult.FAILE_CODE, "该部门已被引用，暂时无法删除", null);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}

	/**
	 * 部门list
	 * 
	 * <p>Title: departmentList</p> 
	 * <p>Description: </p>  
	 * @time 下午3:37:31 
	 * @param currentPage
	 * @param pageSize
	 * @param departmentName
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/departmentList", method = RequestMethod.GET)
	public String departmentList(
			@RequestParam(required = false, defaultValue = DataConstant.currentPage) Integer currentPage,
			@RequestParam(required = false, defaultValue = DataConstant.pageSize) Integer pageSize,
			String departmentName, Model model) {
		String departmentNames = null;
		try {
			if (departmentName != null) {
				departmentNames = new String(departmentName.getBytes("ISO8859-1"), "UTF-8");
			}
			Pager<Department> page = departmentService.findPage(departmentNames, currentPage, pageSize);
			// 遍历page
			for (int i = 0; i < page.getDataList().size(); i++) {
				// 获取部门的父级id
				int departmentParentId = page.getDataList().get(i).getDepartmentParentId();
				if (departmentParentId != DataConstant.department_top_parentId) {// 不为顶级部门
					// 查询父级部门
					Department departments = departmentService.findParentInfo(departmentParentId);
					// 设置父级部门名称
					page.getDataList().get(i).setParentDepName(departments.getDepartmentName());
				} else {// 顶级部门,跳过
					continue;
				}
			}
			model.addAttribute("page", page);
			model.addAttribute("departmentName", departmentNames);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return "admin/department/departmentList";
	}
}
