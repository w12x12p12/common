
package com.hongedu.honghr.honghr.web;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hongedu.honghr.util.chineseChar.ChineseInital;
import com.hongedu.honghr.util.json.JsonResult;
import com.hongedu.honghr.util.page.Pager;
import com.hongedu.honghr.honghr.common.constant.DataConstant;
import com.hongedu.honghr.honghr.entity.Department;
import com.hongedu.honghr.honghr.entity.Employee;
import com.hongedu.honghr.honghr.entity.Position;
import com.hongedu.honghr.honghr.service.DepartmentService;
import com.hongedu.honghr.honghr.service.PositionService;


/**
 * @author  
 * el_bp_position 表对应的controller
 * 2017/12/07 04:04:41
 */
@Controller
@RequestMapping("/admin/position")
public class PositionController {
	
	@Autowired
	private PositionService positionService;
	@Autowired
	private DepartmentService departmentService;
	/**
	 * 查询Position详情
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/findPosition",method=RequestMethod.POST)
	public JsonResult findPosition(
			@RequestParam(required=true)java.lang.Integer positionId) {
		try {
			Position position = positionService.findById(positionId);
			return new JsonResult(JsonResult.SUCCESS_CODE, "", position);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}
	
	/**
	 * 编辑Position
	 * @param id
	 * @return
	 */
	@RequestMapping(value="/editPosition",method=RequestMethod.GET)
	public String editPosition(
			java.lang.Integer positionId,
			Model model) {
		List<Department> departmentList = departmentService.findDepartmentList();
		if(positionId != null){
			Position position = positionService.findById(positionId);
			Department department = departmentService.findById(position.getDepartmentId());
			model.addAttribute("position", position);
			model.addAttribute("department", department);
		}
		model.addAttribute("departmentList", departmentList);
		return "admin/position/editPosition";
	}
	
	/**
	 * 保存Position
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/savePosition",method=RequestMethod.POST)
	public JsonResult savePosition(Position position) {
		try {
			ChineseInital chineseInital = new ChineseInital();
			if(position.getPositionId() == null){
				position.setPositionCode(chineseInital.getAllFirstLetter(position.getPositionName()));
				position.setReferred(DataConstant.UNREFERRED);
				position.setDeleted(DataConstant.EXIST);
				positionService.add(position);
			}else{
				position.setPositionCode(chineseInital.getAllFirstLetter(position.getPositionName()));
				position.setReferred(DataConstant.UNREFERRED);
				position.setDeleted(DataConstant.EXIST);
				positionService.update(position);
			}
			return new JsonResult(JsonResult.SUCCESS_CODE, "", null);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}
	
	/**
	 * 删除Position
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/deletePosition",method=RequestMethod.POST)
	public JsonResult deletePosition(
			Position position) {
		try {
			Position positions = positionService.findById(position.getPositionId());
			if (!positions.getReferred().equals(DataConstant.REFERRED)) {
				positionService.updateDel(position);
				return new JsonResult(JsonResult.SUCCESS_CODE, "", null);
			}else {
				return new JsonResult(JsonResult.FAILE_CODE, "该职务已被引用，暂时无法删除", null);
			}
		} catch (Exception e) {
			e.printStackTrace();
		return new JsonResult(JsonResult.FAILE_CODE, "系统异常", null);
		}
	}
	
	/**
	 * 查询Position表单页面
	 * @param currentPage 当前页
	 * @param pageSize 分页数
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/positionList",method=RequestMethod.GET)
	public String positionList(
			@RequestParam(required=false,defaultValue="1")Integer currentPage,
			@RequestParam(required=false,defaultValue="10")Integer pageSize,
			String positionName,
			Model model) {
		Pager<Position> page = positionService.findPage(positionName,currentPage, pageSize);
		for (int i = 0; i < page.getDataList().size(); i++) {
			int departmentId =  page.getDataList().get(i).getDepartmentId();
			Department department = departmentService.findDepartment(departmentId);
			page.getDataList().get(i).setDepName(department.getDepartmentName());
		}
		model.addAttribute("page", page);
		model.addAttribute("positionName", positionName);
		return "admin/position/positionList";
	}
}
